<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on KP Kelley (they/them)</title><link>/posts/</link><description>Recent content in Posts on KP Kelley (they/them)</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 24 May 2018 10:05:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>FP &amp; OOP</title><link>/posts/fp-oop/</link><pubDate>Thu, 24 May 2018 10:05:00 +0000</pubDate><guid>/posts/fp-oop/</guid><description>Nothing is more dangerous than an idea, if its the only idea we have.
&amp;ndash; Emile Chartier
This week I watched Brian Goetz talk on FP is Dead - Long Live FP and I want to discuss some of the main points he makes and things that resonated with me.
Anyone who knows me know that I&amp;rsquo;m a big sports fan. I grew up watching and playing all types of sports.</description></item><item><title>Simple Made Easy</title><link>/posts/2018-05-23-simple/</link><pubDate>Wed, 23 May 2018 11:20:00 +0000</pubDate><guid>/posts/2018-05-23-simple/</guid><description>I watched Rich Hickey&amp;rsquo;s talk on Simple Made Easy and he discusses why simplicity matters in software and what it means to create simple systems. I thought this talk was rather interesting in the way he dives deep into the meaning of simplicity and easiness in regards to software.
I tend to think of &amp;ldquo;simple&amp;rdquo; as being synonymous with easy. What&amp;rsquo;s easy for me is not necessarily easy for others and vice versa.</description></item><item><title>Boundaries</title><link>/posts/2018-05-21-title/</link><pubDate>Tue, 22 May 2018 14:05:00 +0000</pubDate><guid>/posts/2018-05-21-title/</guid><description>The theme of &amp;ldquo;boundaries&amp;rdquo; has continued to make an appearance this past week for me. So I want to talk about boundaries in the context of software architecture.
You can draw boundaries around anything, even in software. Boundaries, in the general sense, help you create some type of separation of concern.
Think about boundaries for a minute in terms of social norms. Social norms are rules (or boundaries) that are considered typical because most people in a society agree that they are reasonable ways to live.</description></item><item><title>CORS</title><link>/posts/2018-05-15-cors/</link><pubDate>Tue, 15 May 2018 14:52:00 +0000</pubDate><guid>/posts/2018-05-15-cors/</guid><description>This week I came across my first CORS error. I was trying to make an HTTP request from my React app to my TicTacToe API; both apps are deployed on different domains.
Previously, I had made countless requests to my API using Postman, Netcat, Telnet, etc. so why all of a sudden am I getting these weird CORS errors?
First, it&amp;rsquo;s important to know about same-origin policy which is a security measure implemented by web browsers.</description></item><item><title>Decorator Pattern</title><link>/posts/2018-05-07-decorator/</link><pubDate>Mon, 07 May 2018 11:01:00 +0000</pubDate><guid>/posts/2018-05-07-decorator/</guid><description>The decorator pattern&amp;rsquo;s intent can be described as:
A structural design pattern that lets you attach new behaviors to objects by placing them inside wrapper objects that contain these behaviors.
You can also think of it as wrapping a gift, putting it in a box, and then wrapping that box.
When might you want to use the decorator pattern? Consider the scenario that you have to add or remove responsibilities from an object dynamically, but you need to do it in a way to that it stays compatible with the rest of the application&amp;rsquo;s code.</description></item><item><title>Jetty Server and HTTP Libraries</title><link>/posts/2018-05-01-jetty/</link><pubDate>Thu, 03 May 2018 13:00:00 +0000</pubDate><guid>/posts/2018-05-01-jetty/</guid><description>The purpose of this post is to review the Eclipse Jetty Web Server library. Specifically, we&amp;rsquo;ll be discussing the Server and Http packages but I&amp;rsquo;ll also give a high level overview of the library.
First off, Jetty provides an HTTP server and Servlet container that&amp;rsquo;s capable of serving static and dynamic content. It also supports HTTP/2 among other components and integrations.
Server and HTTP package structure The http package contains tools for Http processing.</description></item><item><title>Easing into UML</title><link>/posts/2018-04-12-uml/</link><pubDate>Thu, 12 Apr 2018 08:23:00 +0000</pubDate><guid>/posts/2018-04-12-uml/</guid><description>I can&amp;rsquo;t count the amount of times I&amp;rsquo;ve come across UML diagrams while reading a technical book or blog post. I can only understand very basic, very simple diagrams. At this point, I can only make assumptions about what complex diagrams are trying to illustrate.
A few weeks ago my mentors ask me to create a UML class diagram illustrating my current HTTP server project. I won&amp;rsquo;t say my diagram was syntactically correct, actually I&amp;rsquo;m pretty sure it wasn&amp;rsquo;t.</description></item><item><title>Builder Pattern</title><link>/posts/2018-04-11-builder/</link><pubDate>Wed, 11 Apr 2018 12:40:00 +0000</pubDate><guid>/posts/2018-04-11-builder/</guid><description>The intent of the builder pattern is to:
Separate the construction of a complex object from its representation so that the same construction process can create different representations
In a nutshell, it&amp;rsquo;s concerned with the creation of objects. I know off the top of my head there is another pattern that is also concerned with the creation of objects, the factory method pattern. There may be more that I am not aware of.</description></item><item><title>Composite Pattern</title><link>/posts/2018-04-05-title/</link><pubDate>Thu, 05 Apr 2018 19:34:00 +0000</pubDate><guid>/posts/2018-04-05-title/</guid><description>I&amp;rsquo;ll keep the theme going this week about patterns I&amp;rsquo;ve learned about recently.
The composite pattern is defined as:
Composite pattern is a partitioning design pattern and describes a group of objects that is treated the same was as a single instance of the same object.
The intent of this pattern is to compose objects into tree structures to represent part-whole hierarchies. This allows you to ask each node in the tree structure to perform a task.</description></item><item><title>Proxy Pattern</title><link>/posts/2018-04-03-proxy/</link><pubDate>Tue, 03 Apr 2018 15:34:00 +0000</pubDate><guid>/posts/2018-04-03-proxy/</guid><description>Last week one of my mentors suggested that I use the proxy pattern to help me design a particular feature of my HTTP server. I always get really excited when I can learn and apply a new design pattern or principle. This particular principle helped me solve an interesting issue however I felt the use cases I was coming across online for the pattern were rather weak which confused me as to how this particular pattern was going to help me.</description></item><item><title>Package Principles</title><link>/posts/2018-03-28-package/</link><pubDate>Wed, 28 Mar 2018 08:10:00 +0000</pubDate><guid>/posts/2018-03-28-package/</guid><description>This post will be focused on how my current HTTP server project either adheres or violates certain package principles. I will discuss all the principles including their definitions and compare my current project&amp;rsquo;s package structure.
Package principles are a way of organizing classes in larger systems to make them more organized and manageable. They help to understand which classes should go into which packages (i.e. cohesion) and how these packages should relate with one another (i.</description></item><item><title>Web Abstractions</title><link>/posts/2018-03-26-web/</link><pubDate>Mon, 26 Mar 2018 08:10:00 +0000</pubDate><guid>/posts/2018-03-26-web/</guid><description>This post will be mostly focused on web abstractions in Ruby, Java, and Clojure. All of these languages have web application libraries that abstract the details of HTTP into a simple, unified API. The goal of these libraries is to provide a minimal API for connecting web servers (i.e. WEBrick) and web frameworks (i.e. Rails, Sinatra). There are other languages that also have similar web abstractions but I&amp;rsquo;m mostly going to be focusing on these languages specifically.</description></item><item><title>Java Classpath</title><link>/posts/2018-03-20-classpath/</link><pubDate>Tue, 20 Mar 2018 16:10:00 +0000</pubDate><guid>/posts/2018-03-20-classpath/</guid><description>As a developer who is new to Java, I think understanding the classpath has been rather confusing. The official docs don&amp;rsquo;t do a great job at explaining what it is and many blog posts out there talk about how to set the classpath and not about the why.
I always understand things better when I can comprehend the why so let&amp;rsquo;s dig into what a classpath really is.
In order to understand the classpath we&amp;rsquo;ll first discuss some other topics like packages and imports as well as it&amp;rsquo;s important to talk about before we get into the actual classpath.</description></item><item><title>What's HTTP?</title><link>/posts/2018-03-19-title/</link><pubDate>Mon, 19 Mar 2018 11:54:00 +0000</pubDate><guid>/posts/2018-03-19-title/</guid><description>What is HTTP? HTTP stands for Hypertext Transfer Protocol. It&amp;rsquo;s the network protocol used to deliver virtually all files and other data (referred to as resources) on the World Wide Web. This includes HTML files, images, query results, etc.
HTTP functions as a request-response protocol in the client-server computing model which I lightly touched on in a prior post.
A browser is an HTTP client because it sends request to an HTTP server which then sends responses back to the client (the browser).</description></item><item><title>Docker Basics</title><link>/posts/2018-03-11-docker/</link><pubDate>Sun, 11 Mar 2018 14:20:00 +0000</pubDate><guid>/posts/2018-03-11-docker/</guid><description>This week I am giving a presentation on Docker and thought it would be helpful to flesh out my thoughts and understanding of Docker on my blog as well.
I think the hardest part about learning Docker as a newer developer is understanding why Docker is so popular to begin with. I&amp;rsquo;ve find that most tutorials assume you&amp;rsquo;ve had several years of experience in software development and have alot of base knowledge.</description></item><item><title>Beyond Unit Testing</title><link>/posts/2018-03-09-tests/</link><pubDate>Fri, 09 Mar 2018 07:45:00 +0000</pubDate><guid>/posts/2018-03-09-tests/</guid><description>For the past few weeks I&amp;rsquo;ve been reading Growing Object-Oriented Software (GOOS), Guided by Tests by Steve Freeman and Nat Pryce. I&amp;rsquo;m continually amazed at how much I&amp;rsquo;ve learned just by reading technical books throughout my apprenticeship. I&amp;rsquo;m also amazed at the amount I&amp;rsquo;m learning about TDD and writing tests.
I&amp;rsquo;ve already written a post about TDD patterns which are helpful in getting the hang of a TDD workflow. I&amp;rsquo;d recommend checking out that post if you haven&amp;rsquo;t read it.</description></item><item><title>The role of Sockets</title><link>/posts/2018-03-06-sockets/</link><pubDate>Wed, 07 Mar 2018 10:03:00 +0000</pubDate><guid>/posts/2018-03-06-sockets/</guid><description>This week I began my HTTP server project in Java. It is nice have some familiarity in Java because there are many aspects about building a server that are very foreign to me. Of course, I will likely learn alot more about Java along the way as well. Essentially, the HTTP Server will prove to be a great learning experience all-around.
What&amp;rsquo;s a socket? I&amp;rsquo;m not talking about the type of socket you insert a lightbulb into.</description></item><item><title>Achieving Polymorphism in Clojure</title><link>/posts/2018-02-29-testing/</link><pubDate>Thu, 01 Mar 2018 14:23:00 +0000</pubDate><guid>/posts/2018-02-29-testing/</guid><description>In prior Tic Tac Toe projects I relied on duck typing in Ruby and interfaces in Java to aid me in adhering to the the open-closed principle and having polymorphism.
Specifically, all of my player objects would respond to makeMove() functions or the like. Each player had it&amp;rsquo;s own implementation of how it chose a move on the board. As long as they implemented that interface (in Java) or that method was defined within it&amp;rsquo;s class (in Ruby), it didn&amp;rsquo;t matter about the implementation as long as they responded to the message.</description></item><item><title>Functional Programming</title><link>/posts/2018-02-28-functional/</link><pubDate>Wed, 28 Feb 2018 12:54:00 +0000</pubDate><guid>/posts/2018-02-28-functional/</guid><description>For the past three weeks I&amp;rsquo;ve been &amp;ldquo;functional programming&amp;rdquo;. Clojure is a functional language but what does functional programming even mean? Well, that&amp;rsquo;s what we&amp;rsquo;re going to talk about. I&amp;rsquo;ve been throwing the term around for weeks with rather little understanding of what it really means. While not completely related to what functional programming is, it does make you think in a different way especially coming from an OOP language. I can&amp;rsquo;t count how many times I thought, &amp;ldquo;I&amp;rsquo;ve done this in Ruby and Java, I&amp;rsquo;ll do a similar implementation&amp;rdquo; just to quickly realize I need a new plan of attack because of the lack of loops, state, etc.</description></item><item><title>Clojure Macros</title><link>/posts/2018-02-22-macros/</link><pubDate>Thu, 22 Feb 2018 09:10:00 +0000</pubDate><guid>/posts/2018-02-22-macros/</guid><description>Macros have somewhat intimidated me as a newbie to Clojure. I didn&amp;rsquo;t understand why they would be useful and I had a hard time understanding how to write my own macros (still working on it, to be honest!). So let&amp;rsquo;s talk about macro basics and how to write our own macros.
Macros in Clojure are a way to do metaprogramming. Metaprogramming is a programming technique in which computer programs have the ability to treat programs as their data.</description></item><item><title>Threading Macros</title><link>/posts/2018-02-15-threads/</link><pubDate>Thu, 15 Feb 2018 10:30:00 +0000</pubDate><guid>/posts/2018-02-15-threads/</guid><description>It&amp;rsquo;s not even been a week since I&amp;rsquo;ve been programming in Clojure and I kept seeing these funny looking arrows -&amp;gt; in blogs and on StackOverflow. I had a sense in how they worked and decided to use them in my first feature because I thought they made the code easier to read.
Come to find out, they are called threading macros. You don&amp;rsquo;t have to use them but they seem to express more clearly what you are attemping to do with your data structure.</description></item><item><title>Java Virtual Machine (JVM)</title><link>/posts/2018-02-14-jvm/</link><pubDate>Wed, 14 Feb 2018 13:01:00 +0000</pubDate><guid>/posts/2018-02-14-jvm/</guid><description>As I began a new project using Clojure last week I found out that Clojure &amp;ldquo;runs on the JVM&amp;rdquo;. There are other languages that also run on the JVM including: Scala, Groovy, and Kotlin. So let&amp;rsquo;s talk about what that JVM actually is and how other lanauges can run on it.
At the heart of a computer is the CPU and it&amp;rsquo;s job is to execute operations. The CPU&amp;rsquo;s architecture determines what operations are available as part of the architecture&amp;rsquo;s instruction set.</description></item><item><title>Test-Driven Development Patterns</title><link>/posts/2018-02-08-tdd-patterns/</link><pubDate>Thu, 08 Feb 2018 16:39:00 +0000</pubDate><guid>/posts/2018-02-08-tdd-patterns/</guid><description>I recently began reading Test-Driven Development By Example by Kent Beck and I can&amp;rsquo;t say enough about the book. If you haven&amp;rsquo;t read it, I would highly recommend it.
Prior to my apprenticeship, I knew Test-Driven Development was considered a best-practice. In the field of social work, my prior profession, there is a very strong committment evidence-based practice. Evidence-based practice means that a particular treatment or methodology has been established as effective through scientific research.</description></item><item><title>SOLID&amp;#58; Dependency Inversion Principle</title><link>/posts/2018-02-07-title/</link><pubDate>Wed, 07 Feb 2018 11:00:00 +0000</pubDate><guid>/posts/2018-02-07-title/</guid><description>The Dependency Inversion Principle states:
&amp;ldquo;High level modules should not depend on low level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.&amp;rdquo;
Put simply, the Dependency Inversion Principle says that you should depend on abstractions and not concretions.
Let&amp;rsquo;s take a look at this example which violates the Dependency Inversion Principle. What if we wanted to build an application that sent notifications to users via email.</description></item><item><title>State Pattern</title><link>/posts/2018-01-30-title/</link><pubDate>Tue, 30 Jan 2018 09:46:00 +0000</pubDate><guid>/posts/2018-01-30-title/</guid><description>The State Pattern is defined as:
&amp;ldquo;Allows an object to alter its behavior when its internal state changes. The object will appear to change its class&amp;rdquo;
This pattern is a behavioral pattern, like the strategy pattern, and it&amp;rsquo;s used to manage algorithms, relationships and responsibilities between objects. Said another way, it allows objects to behave in different ways depending on the interal state.
This pattern is used when you need a class to behave differently, based on some arguments passed through the class at runtime.</description></item><item><title>SOLID&amp;#58; Interface Segregation Principle</title><link>/posts/2018-01-23-title/</link><pubDate>Tue, 23 Jan 2018 09:45:00 +0000</pubDate><guid>/posts/2018-01-23-title/</guid><description>The Interface Segregation Principle states:
&amp;ldquo;Clients should not be forced to depend on methods they do not use.&amp;rdquo;
What that means is that your interfaces should not be bloated with methods that implementing classes don&amp;rsquo;t require. Such interfaces are referred to as &amp;ldquo;fat&amp;rdquo; interfaces. ISP favors small, specific interfaces so that clients only have to know about the methods that are of interest to them which are often referred to as &amp;ldquo;role&amp;rdquo; interfaces.</description></item><item><title>SOLID&amp;#58; Liskov Substitution Principle</title><link>/posts/2018-01-22-title/</link><pubDate>Mon, 22 Jan 2018 10:45:00 +0000</pubDate><guid>/posts/2018-01-22-title/</guid><description>The Liskov Substitution Principle, in summary, states:
Subtypes must be substitutable for their base types.
It also states:
&amp;ldquo;If S is a declared subtype of T, objects of type S should behave as objects of Type T are expected to behave, if they are treated as objects of type T&amp;rdquo;
If that second statement confused you, don&amp;rsquo;t fret. I&amp;rsquo;ll admit that the Liskov Substitution Principle has been one of the more difficult principles for me to completely understand.</description></item><item><title>SOLID&amp;#58; Open-Closed Principle</title><link>/posts/2018-01-17-title/</link><pubDate>Wed, 17 Jan 2018 12:40:00 +0000</pubDate><guid>/posts/2018-01-17-title/</guid><description>The definition for Open-Closed Principle (OCP) is as follows:
Software entities (classes, modules, functions, etc.) should be open for extension and closed for modification.
If OCP is applied properly, further changes or features are achieved by adding new code, not modifying code that already works.
Open for extension means that as requirements change we can extend the module with new behaviors that satisfy the change or feature.
Closed for modification means that extending the behavior of a module does not result in changes to the source code of the module.</description></item><item><title>SOLID&amp;#58; Single Responsibility Principle</title><link>/posts/2018-01-16-title/</link><pubDate>Tue, 16 Jan 2018 15:40:00 +0000</pubDate><guid>/posts/2018-01-16-title/</guid><description>For the next few posts I will be focusing on each each of the SOLID principles. The first principle is the Single Responsibility Principle, which I lightly touched on in a previous post.
The Single Responsibility Principle states &amp;ldquo;A class or module should have only one reason to change&amp;rdquo;.
When I first read that definition I wondered, what constitutes as change? One of the statements I read in Agile Software Development: Principles, Patterns, and Practices really stuck.</description></item><item><title>Java Interfaces</title><link>/posts/2018-01-11-title/</link><pubDate>Thu, 11 Jan 2018 15:40:00 +0000</pubDate><guid>/posts/2018-01-11-title/</guid><description>To understand interfaces and how to use them in Java I&amp;rsquo;m going to work off an example that includes a ComputerPlayer class and a HumanPlayer class within a TTT game. They both implement some of the same functions. During game play, I don&amp;rsquo;t necessarily want to know if I&amp;rsquo;m dealing with a HumanPlayer or a ComputerPlayer. I do know that I want them to both call makeMove() when it&amp;rsquo;s their turn.</description></item><item><title>Presenter Pattern</title><link>/posts/2018-01-09-title/</link><pubDate>Tue, 09 Jan 2018 12:15:00 +0000</pubDate><guid>/posts/2018-01-09-title/</guid><description>The presenter pattern can be loosely tied to the idea of the Single Responsibility Principle (SRP). SRP states that &amp;ldquo;a class or module should have only one reason to change&amp;rdquo;. If your class or module does two (or more) unrelated things then it does not have a single responsibility; it has more than one reason to change.
This week as I worked on my Tic Tac Toe board, I had the inclination to have my UserInterface class also handle the building the TTT board.</description></item><item><title>DRY principle</title><link>/posts/2018-01-05-title/</link><pubDate>Fri, 05 Jan 2018 19:15:00 +0000</pubDate><guid>/posts/2018-01-05-title/</guid><description>Over the past year I&amp;rsquo;ve come across the concept of DRY (Do not Repeat Yourself) time and time again. It was one of the first software principles that made sense to me and happened to be one of the first principles I would usually attempt to apply in my code.
The DRY principle states &amp;ldquo;Every piece of knowledge should have one and only one representation.&amp;rdquo; It is also expressed as &amp;ldquo;Once and Only Once.</description></item><item><title>What's Maven?</title><link>/posts/2018-01-03-title/</link><pubDate>Wed, 03 Jan 2018 15:00:00 +0000</pubDate><guid>/posts/2018-01-03-title/</guid><description>This week I began my resident apprenticeship at 8th Light in Chicago. One of my first projects is to build a Tic Tac Toe game in Java. My first task is to get a project skeleton setup using Maven. I checked out the Maven documentation along with a few articles and I picked up pretty quickly that Maven is a build tool used for Java projects. After a while, a question still lingered, what&amp;rsquo;s a build tool and why do I need it?</description></item><item><title>Post DBC</title><link>/posts/2017-11-16-title/</link><pubDate>Thu, 16 Nov 2017 08:22:00 +0000</pubDate><guid>/posts/2017-11-16-title/</guid><description>Almost three weeks ago I graduated from Dev Bootcamp. I had intended to blog about my journey throughout but time didn&amp;rsquo;t allow. It was an incredible learning experience and I learned more than I could have imagined.
Prior to DBC I had been learning Ruby on my own for nearly a year. Being able to finally put the pieces of the puzzle together brought so much clarity what I learned on my own.</description></item><item><title>Strong Params</title><link>/posts/2017-10-08-title/</link><pubDate>Sun, 08 Oct 2017 15:22:00 +0000</pubDate><guid>/posts/2017-10-08-title/</guid><description>In the next few days, I will be giving my first lightning talk as part of Phase 3 at DBC and it happens to be on the topic of strong parameters in Rails. As I was preparing for my talk I thought I would flesh out my thoughts on my blog as well.
Strong parameters comes shipped with Rails 4+ by default. In previous versions, it was available through a plugin and/or gem.</description></item><item><title>CSS Positioning</title><link>/posts/2017-07-05-title/</link><pubDate>Wed, 05 Jul 2017 11:30:00 +0000</pubDate><guid>/posts/2017-07-05-title/</guid><description>Week 2 at DBC was focused on HTML which was a great refresher for me. HTML was the first language I learned when I started learning how to code. I hadn&amp;rsquo;t worked with it much in the last 7-8 months as I focused mostly on learning Ruby and basic programming concepts. I had the chance to dive deeper into building tables and gaining a better understanding of semantic elements.
Week 3 is focused on CSS.</description></item><item><title>Git &amp; Github</title><link>/posts/2017-06-26-title/</link><pubDate>Mon, 26 Jun 2017 19:30:00 +0000</pubDate><guid>/posts/2017-06-26-title/</guid><description>Week 1 at DBC was spent getting to know the command line better along with proper git and Github workflow.
I&amp;rsquo;ve used git and Github for almost a year now. I knew how to initialize a repo and push my code to the master branch. That was about it. I knew there was more to it but I did not understand git&amp;rsquo;s true purpose and why version control is great when working in teams.</description></item><item><title>Enrolled @ Dev Bootcamp</title><link>/posts/2017-06-05-title/</link><pubDate>Mon, 05 Jun 2017 10:15:00 +0000</pubDate><guid>/posts/2017-06-05-title/</guid><description>For almost a year now I have been learning to program on my own. It takes plenty of self discipline and tenacity to stick with a tough project or learn a new concept especially when you don&amp;rsquo;t understand something. Some weeks I felt confident because a particular concept began to &amp;ldquo;click&amp;rdquo;, the next week it felt like nothing clicked! The most important part is just to stick with it, no matter how long it takes.</description></item><item><title>Puts vs. Return</title><link>/posts/2017-04-06-title/</link><pubDate>Thu, 06 Apr 2017 12:25:00 +0000</pubDate><guid>/posts/2017-04-06-title/</guid><description>When I first began programming it was difficult for me to distinguish the difference between puts and return and I&amp;rsquo;ve come to realize this is common for beginners. By just looking at the words, they may sound like they do the same thing but that&amp;rsquo;s not the case.
puts puts is actually a method call in ruby that stands for &amp;lsquo;print string&amp;rsquo;. It is an instance method available through the Kernel Module.</description></item><item><title>Each, Map, &amp; Select</title><link>/posts/2017-04-03-title/</link><pubDate>Mon, 03 Apr 2017 13:45:00 +0000</pubDate><guid>/posts/2017-04-03-title/</guid><description>There are many ways to loop through an array or a hash. For instance, you can simply use a do/while loop along with a counter, a way to retrieve the current element, and a way to exit the loop. Thankfully, Ruby provides us with some very helpful methods to accomplish such tasks based on what we want do to with our collection. The methods I am referring to are each, select, and map.</description></item><item><title>Local Variable Scope</title><link>/posts/2017-03-20-title/</link><pubDate>Tue, 21 Mar 2017 14:05:00 +0000</pubDate><guid>/posts/2017-03-20-title/</guid><description>There are many different types of variables in Ruby but for the purposes of this post I will only be addressing local variables and the concept of scope in regards to accessing local variables. A variable&amp;rsquo;s scope determines where in the program that variable is available for use. The scope is defined by where the variable is initialized. Two common areas where we encounter variable scoping rules are in blocks and methods.</description></item><item><title>Intro to Ruby Collections</title><link>/posts/2017-01-08-title/</link><pubDate>Sun, 08 Jan 2017 17:15:00 +0000</pubDate><guid>/posts/2017-01-08-title/</guid><description>When working with data in Ruby we need to store it somewhere in structured containers, or collections. The most common collection types in Ruby are Hash, Array, and String.
Element reference string = &amp;#34;abcde&amp;#34; string[0] # =&amp;gt; &amp;#34;a&amp;#34; string[1] # =&amp;gt; &amp;#34;b&amp;#34; You can also reference multiple characters in a string by using an index starting point and the number of characters to return. For example if we wanted to return the word &amp;ldquo;sky&amp;rdquo;:</description></item><item><title>Learning Update</title><link>/posts/2016-11-30-title/</link><pubDate>Wed, 30 Nov 2016 18:12:00 +0000</pubDate><guid>/posts/2016-11-30-title/</guid><description>I&amp;rsquo;ve not written many coding blog posts as I&amp;rsquo;ve hoped in the last two months. I&amp;rsquo;ve been coding for nearly 6 months and have learned more than I ever expected at this point. Over the last two months I have struggled to stay on a steady track of teaching myself to program. I don&amp;rsquo;t mean that I haven&amp;rsquo;t found the time, I actually spend somewhere between 15-20 (sometimes 30) hours a week on top of a full-time job learning to code.</description></item><item><title>Ruby Classes and Objects</title><link>/posts/2016-10-01-title/</link><pubDate>Sat, 01 Oct 2016 20:12:00 +0000</pubDate><guid>/posts/2016-10-01-title/</guid><description>I have been making my way through Zed Shaw&amp;rsquo;s &amp;lsquo;Learn Ruby the Hard Way&amp;rsquo; for the past week. The first half of the book was helpful in the way it hit on the basics. However, once I began to learn about classes, objects, inheritance and how they all work together, I had a hard time wrapping my brain around it.
It&amp;rsquo;s taken me longer than I anticipated to begin to understand these concepts that are essential to understanding an object-oriented program like Ruby.</description></item><item><title>Getting Started</title><link>/posts/getting-started/</link><pubDate>Sun, 25 Sep 2016 15:59:00 +0000</pubDate><guid>/posts/getting-started/</guid><description>I started my coding journey nearly two months ago and I am amazed at how much I&amp;rsquo;ve learned thus far. A very long road lies ahead because there&amp;rsquo;s still so much to learn but that&amp;rsquo;s the fun part.
During my 45 minute commute back and forth to my normal job I&amp;rsquo;ve been listening to the Code Newbie podcast and the I keep hearing the same advice: &amp;ldquo;blog about what you are learning and it will help you internalize the concepts&amp;rdquo;.</description></item></channel></rss>